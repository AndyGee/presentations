---
title: Real World Bahavior Driven Design
subtitle: 
location: OSCon 2013
layout: dzslides
---
- page.html_class = "aspect-16-9"
- page.stylesheets = ['/stylesheets/oscon_bdd.css']
- page.javascripts = ['/javascripts/jquery-timer.js']

%section
  %embed{:src=>"/images/astrophysics/arquillian_icon_256px.svg", :type=>"image/svg+xml"}
  %h1.spaced
    .brand 
      %span.project Real world
      %br Behavior Driven Design

  .authors
    %h3
      Aslak Knutsen
      %small(style='font-size: .6em') @aslakknutsen
    %span.project Red Hat

%section

  %h1 Requirement

%section

  %h1 Story

%section 
  
  %h2 
    New
    %span.project 
      %strong Awestruct
    Requirement
  .incremental 
    %h4 
      As a User I Should be able to 
      %br
      %span.project Interpolate AsciiDoc
      documents

%section
  .code
    .code_inner
      =partial("awestruct/awestruct_asciidoc_source.md")

      =partial("awestruct/awestruct_asciidoc_output.md")

%section

  %h2 The Model

  %h4 
    .incremental
      %span Handler Chain &middot; 

      %span Interpolate Handler &middot;

      %span
        %br
        AsciiDoc Handler &middot;
      %span.italic 
        AsciiDoc Handler Chain

%section 

  %h2
    Unit Coverage:
    %span.project 100%

%section 

  %h2.spaced
    Can a user
    %span.project Interpolate AsciiDoc
    documents?

%section.principle
  %h1 ?


%section

  %h1 Real

%section

  %h1.spaced
    .brand 
      %span.project Arquillian
      %br Test middleware

%section
  %h2.down.right Flexible

  %img.flexible.background{:src=>"/images/zoo/flexible.jpg"}

%section
  %h2.down.left Extensible

  %img.extendable.background{:src=>"/images/zoo/extendable.jpg"}

%section
  %h2 
    %span.project Test
    Extension
  %h4 SPI for test runners

%section
  %h2 
    %span.project Test
    Runners
  %h4 JUnit &middot; TestNG &middot; Spock &middot; JBehave &middot; Thucydides

%section
  %h2 
    %span.project Container
    Extension
  %h4 SPI for runtime providers

%section
  %h2 
    %span.project Container
    Adapters
  %h4
    JBoss AS &middot; GlassFish &middot; Jetty &middot; Tomcat
    %br
    WebSphere &middot; WebLogic &middot; Spring &middot; Weld

%section
  %h2 
    %span.project Container Test
    Extension
  %h4 Binds the two &rArr; In container testing

%section
  %h1 
    The 
    %span.project basic 
    Test Class

%section
  .code
    .code_inner
      =partial("astrophysics/basic_junit_test_class.md")

      .overlay.incremental
        =partial("astrophysics/arq_basic_junit_test_class.md")

%section
  %h2
    .brand
      Demo

%section
  %h2
    .brand
      How does this all
      %span.project work?

%section
  %h1 Setup

  %h4 Maven, Gradle, Ant(+Ivy)

%section
  .code
    .code_inner
      =partial("astrophysics/arq_core_depmgm.md")

      .incremental
        =partial("astrophysics/arq_junit_dep.md")

%section
  .code
    .code_inner
      =partial("astrophysics/arq_basic_junit_test_class_full.md")

%section.step
  .code
    .code_inner
      %img{:src=> '/images/lifecycle-steps/1_select_a_container.png'}

%section
  .code
    .code_inner
      =partial("astrophysics/setup_profiles.md")

%section.step
  .code
    .code_inner
      %img{:src=> '/images/lifecycle-steps/2_start_container_single.png'}

%section.step
  .code
    .code_inner
      %img{:src=> '/images/lifecycle-steps/3_package_test_archive.png'}

%section
  %h1
    .brand 
      ShrinkWrap
  %h4 Deployment + Resolver + Descriptors

%section
  .code
    .code_inner
      =partial("astrophysics/shrinkwrap.md")

%section
  .code
    .code_inner
      =partial("astrophysics/shrinkwrap_resolver.md")

%section
  .code
    .code_inner
      =partial("astrophysics/shrinkwrap_descriptors.md")

%section.step
  .code
    .code_inner
      %img{:src=> '/images/lifecycle-steps/3_package_test_archive.png'}

%section.step
  .code
    .code_inner
      %img{:src=> '/images/lifecycle-steps/4_run_test_in_container.png'}

%section.step
  .code
    .code_inner
      %img{:src=> '/images/lifecycle-steps/5_test_result.png'}

%section
  .code
    .code_inner
      %img{:src=> '/images/lifecycle-steps/6_disconnect_container.png'}

%section
  %h1
    .brand 
      Arquillian
      %span.project Enrichers
  %blockquote getting a grip    

%section
  %h1
    .brand 
      Arquillian
      %span.project Extensions
  %blockquote ...and different interaction styles

%section.step
  .code
    .code_inner
      %img{:src=> '/images/incontainer_runmode.png'}

%section.persistence
  %h1
    .brand 
      Arquillian
      %span.project Persistence
  %blockquote don't let the bugs hide in the boilerplate

%section.step
  .code
    .code_inner
      %img{:src=> '/images/client_runmode.png'}

%section
  %h1
    .brand 
      Arquillian
      %span.project Drone
  %blockquote functional mayham

%section.step
  .code
    .code_inner
      %img{:src=> '/images/warp_runmode.png'}

%section
  %h1
    .brand 
      Arquillian
      %span.project Warp
  %blockquote bridging both worlds


%section.step
  .code
    .code_inner
      %img{:src=> '/images/lego_car.jpg'}

%section.step
  .code
    .code_inner
      %img{:src=> '/images/lego_mess.jpg'}


%section

  %h1 BDD in Java

%section

