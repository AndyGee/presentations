---
layout: reveal
---

%section 
    %h1 Code Highlight Test

%section{:data=>{:state=>"code"}}
    .row
        %pre{:style=>"background-color:#999;"}
            %code{:id=>"code1", :style=>"background-color:#999;"}
                :plain
                    @RunWith(Arquillian.class)
                    public class ClusteredCacheTestCase
                    {
                        @Deployment(name = "dep.active-1")
                        @TargetsContainer("container.active-1")
                        public static WebArchive createTestDeployment()
                        {
                            return Deployments.createActiveClient("test-1.war");
                        }

                        @Deployment(name = "dep.active-2")
                        @TargetsContainer("container.active-2")
                        public static WebArchive createTestDeployment2()
                        {
                            return Deployments.createActiveClient("test-2.war");
                        }

                        @Inject
                        private Cache<String, Integer> cache;

                        @Test @InSequence(1) @OperateOnDeployment("dep.active-1")
                        public void callActive1() throws Exception
                        {
                            int count = incrementCache(cache);
                            System.out.println("Cache incremented, current count: " + count);
                            Assert.assertEquals(1, count);
                        }

                        @Test @RunAsClient @InSequence(6) @OperateOnDeployment("dep.active-2")
                        public void callActive6(@ArquillianResource URL baseURL) throws Exception
                        {
                            int count = readInt(baseURL.openStream());
                            System.out.println("Cache incremented, current count: " + count);
                            Assert.assertEquals(6, count);
                        }
                    }

        .fragment{:data=>{:prettify=>"code1", :prettify_lines=>"0:0"}}
        .fragment{:data=>{:prettify=>"code1", :prettify_lines=>"3:8"}}
        .fragment{:data=>{:prettify=>"code1", :prettify_lines=>"10:15"}}
        .fragment{:data=>{:prettify=>"code1", :prettify_lines=>"17:18"}}
        .fragment{:data=>{:prettify=>"code1", :prettify_lines=>"20:26"}}
        .fragment{:data=>{:prettify=>"code1", :prettify_lines=>"28:34"}}

%script
    :plain
        $(function() { 
            show_lines = function (event) {
                $(event.fragment).each(function(count, elem) {
                    var code = $(this);
                    highlight_fragment(code);
                })
            };

            highlight_fragment = function (code) {
                var data_prettify = code.attr('data-prettify')
                var data_prettify_lines = code.attr('data-prettify_lines')
                if(data_prettify != undefined) {
                    var code_lines = data_prettify_lines.split(':')
                    var from = code_lines[0];
                    var to = code_lines[1];

                    var new_lines = ""

                    var code_block = $('#' + data_prettify);

                    var orig_code_id = 'code_' + data_prettify
                    var orig_code = $('#' + orig_code_id)
                    var text = ''
                    if(orig_code.length == 0) {
                        $('body').append('<' + 'code id="' + orig_code_id + '" style="display:none;"' + '>' + code_block.html() + '</' + 'code' + '>');
                        text = code_block.html();
                    }
                    else {
                        text = orig_code.html()
                    }


                    var text_lines = text.split('\n');
                    var between = false;
                    var padding = 0;
                    for(var i = 0; i < text_lines.length; i++) {
                        line = text_lines[i]
                        if(i == from) {
                            between = true;
                            padding = determine_left_padding(line);

                            new_line = line.substring(padding);
                            new_lines += '<' + 'pre' + ' class="prettify" style="background-color:#eee">\n'
                            new_lines += ('<' + 'code' + ' id="highlight" class="prettify" style="background-color:#eee">' +new_line+ '\n')
                        }
                        else {
                            new_lines += (between ? line.substring(padding):line) + '\n'
                        }
                        if(i == to) {
                            between = false;
                            new_lines += '</code></pre>'
                        }
                    }

                    code_block.html(new_lines);
                    prettify();

                    $("#highlight").animate({fontSize: '+=20%'}, 100, 'swing');
                }
            }

            hide_lines = function (event) {
                $(event.fragment).each(function(i, elem) {
                    var code = $(this);
                    var data_prettify = code.attr('data-prettify')
                    var data_prettify_lines = code.attr('data-prettify_lines')
                    if(data_prettify != undefined) {
                        var code_lines = data_prettify_lines.split(':')
                        var from = code_lines[0];
                        var to = code_lines[1];

                        var new_lines = ""

                        var code_block = $('#' + data_prettify);

                        var orig_code_id = 'code_' + data_prettify
                        var orig_code = $('#' + orig_code_id)
                        var text = ''
                        if(orig_code.length == 0) {
                            $('body').append('<' + 'code id="' + orig_code_id + '" style="display:none;"' + '>' + code_block.html() + '</' + 'code' + '>');
                            text = code_block.html();
                        }
                        else {
                            text = orig_code.html()
                        }
                        code_block.html(text);
                        prettify();

                        var previous_fragment = $(".present .fragment.visible").last();
                        highlight_fragment(previous_fragment);
                    }
                })
            };

            restore_original = function(event) {
                    code = $(event)
                    var data_prettify = code.attr('data-prettify')
                    if(data_prettify != undefined) {
                        var code_block = $('#' + data_prettify);

                        var orig_code_id = 'code_' + data_prettify
                        var orig_code = $('#' + orig_code_id)
                        var text = ''
                        if(orig_code.length == 0) {
                            $('body').append('<' + 'code id="' + orig_code_id + '" style="display:none;"' + '>' + code_block.html() + '</' + 'code' + '>');
                            text = code_block.html();
                        }
                        else {
                            text = orig_code.html()
                        }
                        code_block.html(text);
                        prettify();
            }

            function determine_left_padding(line) {
                for(i = 0; i < line.length; i++) {
                    if(line.charAt(i) != ' ') {
                        return i
                    }
                }
                return 0
            }

             Reveal.addEventListener( 'fragmentshown', show_lines);
             Reveal.addEventListener( 'fragmenthidden', hide_lines);

        });
